{"/home/travis/build/npmtest/node-npmtest-mysql-orm/test.js":"/* istanbul instrument in package npmtest_mysql_orm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mysql-orm/lib.npmtest_mysql_orm.js":"/* istanbul instrument in package npmtest_mysql_orm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mysql_orm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mysql_orm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mysql-orm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mysql-orm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mysql_orm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mysql_orm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mysql_orm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mysql_orm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mysql_orm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mysql_orm.__dirname + '/lib.npmtest_mysql_orm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mysql-orm/node_modules/mysql-orm/index.js":"'use strict';\n/*\n * MySQL object-relational mapping\n * ===============================\n *\n * (C) 2014 Mark K Cowan <mark@battlesnake.co.uk>\n *\n * https://github.com/battlesnake/node-mysql-orm\n *\n * Released under GNU General Public License, Version 2\n *\n */\n\nvar mysql = require('mysql');\nvar async = require('async');\nvar _ = require('underscore');\n\nvar utils = require('./utils');\n\n// mysql-orm\n// =========\n// MySQL wrapper for nodejs with focus on foreign keys, rapid development, and\n// easy deployment.\n\n// exports.create\n// --------------\n// Use this to create an ORM instance.  The parameters are passed through to the\n// ORM constructor.  See the documentation for the ORM constructor, below.\n// \n//     var mysqlOrm = require('mysql-orm');\n//     var orm = mysqlOrm.create(schema, data, options, function (err, orm) {\n//       if (err) throw err;\n//       ...\n//     });\n// \nmodule.exports.create = function (schema, defaultdata, options, onready) {\n\treturn new ORM(schema, defaultdata, options, onready);\n};\n\n// names\n// -----\n// Returns an array of names of properties of the object excluding names that\n// begin with a '$' symbol.\nmodule.exports.names = function (obj) {\n\treturn utils.names(obj);\n};\n\n\n// ORM constructor\n// ---------------\n//  + schema - Defines the structure of the database and the relations.\n//    This is described below.\n//  + defaultdata - Initial data to put in database if we (re-)create it.\n//    This is described below.\n//  + options - ORM configuration\n//    + database - Name of the database\n//    + mysql - MySQL connection parameters (felixge/node-mysql)\n//    + debug - Slows the logger\n//    + logLevel - Set the logging verbosity. **MUST BE >= 1**\n//      1. Errors only (throws them after logging)\n//      2. Warnings and level 1\n//      3. Debugging info and level 2\n//    + recreateDatabase - Drop the database and recreate it **DANGER**\n//    + recreateTables - Drop tables and recreate them **DANGER**\n//    + skipChecks - Don't check existence of database and tables (causes\n//      recreate* params to be ignored), don't initialise database, onready is\n// \n// ### Dataset definition\n// \n//     defaultdata = {\n//       table-name: [\n//         { field-name: field-value, field-name: field-value, ... }\n//       ],\n//       table-name: [\n//         ...\n//       ],\n//       ...\n//     }\n// \n//     field-value = <value> | reference-criteria\n// \n// ### Example dataset using reference criteria\n// \n//     var defaultdata = {\n//       users: [\n//         {\n//           name: 'Mark',\n//           age: 25,\n//           country: { id: 370 },\n//           role: { name: 'admin' }\n//         }\n//       ],\n//       countries: [\n//         { id: 44, name: 'United Kingdom' },\n//         { id: 370, name: 'Lithuania' },\n//         { id: 372: name: 'Estonia' }\n//       ]\n//     };\n// \n// \n// ### Schema definition\n// \n//     schema = {\n//       [ $types: type-aliases, ]\n//       table-name: table-definition,\n//       table-name: table-definition,\n//       ...\n//     }\n// \n// #### Type aliases\n// \n//     type-aliases = [\n//       alias-name: basic-type,\n//       alias-name: basic-type,\n//       ...\n//     ]\n// \n// #### Table definitions\n// \n//     // <id: '::id'> is automatically added to all tables for now\n//     table-definition = {\n//       [ $primary: field-list, ]    // Not implemented yet\n//       [ $sort: field-list, ]\n//       field: field-definition,\n//       field: field-definition,\n//       ...\n//     }\n// \n// #### Field definitions\n// \n//     field-definition = 'type-name[,index][,unique][,nullable][,cascade]'\n//     \n//     field-definition =  {\n//       type: type-name,\n//       [ index: boolean ],\n//       [ unique: boolean ],\n//       [ nullable: boolean ],\n//       [ default: value ],\n//       [ onDelete: reference-option ],\n//       [ onUpdate: reference-option ],\n//       [ references: field-definition | table-name ]    // Not tested yet\n//     }\n// \n// #### Types\n// \n//     type-name = alias-name | basic-type\n// \n//     basic-type = database-type | reference-type\n// \n//     database-type = 'VARCHAR(16)', 'TIMESTAMP', 'BIT', 'INTEGER', etc\n// \n//     reference-type = ':table-name'\n// \n// #### Field list\n// \n//     field-list = 'field-name' | ['field-name', 'field-name', ...]\n// \n// #### Reference option\n// \n//     reference-option = 'set null' | 'cascade' | 'ignore'\n// \n// \nfunction ORM(schema, defaultdata, options, onready) {\n\tvar self = this;\n\tthis.debug = options.debug || process.env.DEBUG_MYSQL_ORM;\n\tif (!schema || !options || (!options.skipChecks && !onready)) {\n\t\tthrow new Error('Required parameter missing');\n\t}\n\tif (_(options).has('logLevel')) {\n\t\tthis.logLevel = options.logLevel;\n\t\tif (process.env.DEBUG_MYSQL_ORM) {\n\t\t\tthis.logLevel = 9;\n\t\t}\n\t}\n\tif (!options.database) {\n\t\tthrow new Error('Compulsory option (lol) `database` not specified');\n\t}\n\tif (!options.mysql) {\n\t\tthrow new Error('Compulsory option (lol) `mysql` not specified');\n\t}\n\tthis.database = options.database;\n\tthis.schema = JSON.parse(JSON.stringify(schema));\n\tthis.types = schema.$types;\n\tInternal.initialise_schema(this);\n\tInternal.parse_schema(this);\n\tvar createConnectionPool = function () {\n\t\toptions.mysql.database = options.database;\n\t\tself.connection = mysql.createPool(options.mysql);\n\t\tself.query = self.loggedQuery(self.connection);\n\t};\n\t/* No checks - connect to the DB and return synchronously */\n\tif (options.skipChecks) {\n\t\tcreateConnectionPool();\n\t\tself.ready = true;\n\t\tif (_(onready).isFunction()) {\n\t\t\tonready(null, self);\n\t\t}\n\t\treturn;\n\t}\n\t/* Statup checks */\n\tasync.series([\n\t\t\t/* Create database */\n\t\t\tfunction (callback) {\n\t\t\t\tself.connection = mysql.createConnection(options.mysql);\n\t\t\t\tself.query = self.loggedQuery(self.connection);\n\t\t\t\tcallback();\n\t\t\t},\n\t\t\tasync.apply(Internal.create_database, self, options.recreateDatabase),\n\t\t\tfunction (callback) {\n\t\t\t\tself.connection.end(callback);\n\t\t\t},\n\t\t\t/* Create connection pool */\n\t\t\tfunction (callback) {\n\t\t\t\tcreateConnectionPool();\n\t\t\t\tcallback(null);\n\t\t\t},\n\t\t\t/* Create tables and initialize data */\n\t\t\tasync.apply(Internal.create_tables, self, options.recreateTables),\n\t\t\tfunction (callback) {\n\t\t\t\tif (defaultdata && (options.recreateTables || options.recreateDatabase)) {\n\t\t\t\t\treturn self.saveMultipleTables(defaultdata, callback);\n\t\t\t\t}\n\t\t\t\tcallback(null);\n\t\t\t}\n\t\t],\n\t\tfunction (err) {\n\t\t\tself.ready = true;\n\t\t\tif (_(onready).isFunction()) {\n\t\t\t\tonready(null, self);\n\t\t\t}\n\t\t});\n}\n\nORM.prototype = {};\nORM.prototype.constructor = ORM;\n\n_(ORM.prototype).extend(require('./logging'));\n_(ORM.prototype).extend(require('./logging-query'));\n_(ORM.prototype).extend(require('./transaction'));\n_(ORM.prototype).extend(require('./foreign-keys'));\n_(ORM.prototype).extend(require('./save'));\n_(ORM.prototype).extend(require('./load'));\n_(ORM.prototype).extend(require('./delete'));\n\nvar Internal = {};\n_(Internal).extend(require('./autogen'));\n_(Internal).extend(require('./initialise-schema'));\n_(Internal).extend(require('./parse-schema'));\n\n\n","/home/travis/build/npmtest/node-npmtest-mysql-orm/node_modules/mysql-orm/utils.js":"'use strict';\n\n/*\n * MySQL object-relational mapping\n * ===============================\n *\n * (C) 2014 Mark K Cowan <mark@battlesnake.co.uk>\n *\n * https://github.com/battlesnake/node-mysql-orm\n *\n * Released under GNU General Public License, Version 2\n *\n */\n\nvar mysql = require('mysql');\nvar async = require('async');\nvar _ = require('underscore');\n\n// util\n// ====\n// Internally-used utilities\n\n// indent\n// ------\n// Indents a multiline string\n//\nmodule.exports.indent = function (str) {\n\treturn '\\t' + str.replace(/\\n/g, '\\n\\t');\n};\n\n// names\n// -----\n// Get a list of object names within the given object.  Returns all field names\n// that don't begin with `$` and that aren't functions.\n//\nmodule.exports.names = function (obj) {\n\treturn _(obj).keys().filter(\n\t\tfunction (key) {\n\t\t\treturn key.charAt(0) !== '$' && !_(obj[key]).isFunction();\n\t\t});\n};\n\n// args\n// ----\n// Arguments parser for:\n//\n//     function ([query, ] table|field, [criteria, [options, ]] callback)\n//\nmodule.exports.parse_args = function (orm, args, wantsField) {\n\targs = [].slice.apply(args);\n\tvar params = {};\n\tparams.query = (function () {\n\t\treturn (_(args[0]).isFunction() && args[0].name === 'query') ?\n\t\t\targs.shift() : orm.query;\n\t})();\n\tif (wantsField) {\n\t\tparams.field = (function () {\n\t\t\treturn args.shift();\n\t\t})();\n\t}\n\telse {\n\t\tparams.table = (function () {\n\t\t\tvar table = args.shift();\n\t\t\tif (_(table).isString() && _(orm.schema).has(table)) {\n\t\t\t\treturn orm.schema[table];\n\t\t\t}\n\t\t\telse if (_(table).isObject() && table.$type === 'table' && table.$schema === orm.schema) {\n\t\t\t\treturn table;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error('Cannot resolve table: ' + JSON.stringify(table));\n\t\t\t\t//return table;\n\t\t\t}\n\t\t})();\n\t}\n\tparams.callback = (function () {\n\t\tvar callback = args.pop();\n\t\tif (!_(callback).isFunction()) {\n\t\t\tthrow new Error('Callback is not a function!');\n\t\t}\n\t\treturn callback;\n\t})();\n\tparams.data = (function () {\n\t\tvar data = args.shift();\n\t\tif (wantsField) {\n\t\t\treturn data;\n\t\t}\n\t\tif (_(data).isNull() || _(data).isUndefined()) {\n\t\t\treturn {};\n\t\t}\n\t\tif (_(data).isString() || _(data).isNumber()) {\n\t\t\tif (params.table.$primary.length !== 1) {\n\t\t\t\treturn callback(new Error('Table \"' + params.table.$name +\n\t\t\t\t\t'\" has no simple primary key, please specify a search ' +\n\t\t\t\t\t'key explicitly'));\n\t\t\t}\n\t\t\treturn _.object([params.table.$primary[0]], [data]);\n\t\t}\n\t\treturn data;\n\t})();\n\tvar hasOptions;\n\tparams.options = (function () {\n\t\tvar options = args.shift();\n\t\thasOptions = !!options && options != {};\n\t\treturn options || {};\n\t})();\n\tparams.hasOptions = hasOptions;\n\treturn params;\n};\n","/home/travis/build/npmtest/node-npmtest-mysql-orm/node_modules/mysql-orm/logging.js":"'use strict';\n/*\n * MySQL object-relational mapping\n * ===============================\n *\n * (C) 2014 Mark K Cowan <mark@battlesnake.co.uk>\n *\n * https://github.com/battlesnake/node-mysql-orm\n *\n * Released under GNU General Public License, Version 2\n *\n */\n\nvar cli = require('cli-color');\n\nvar ORM = { prototype: {} };\nmodule.exports = ORM.prototype;\n\n// logging\n// =======\n// Colourful logging for mysql-orm\n//\n\n// \n// logLevel: int\n// --------\n// \n// Sets the logging level.\n//  + 0: all messages are ignored including fatal errors.  Do not use this\n//    level.\n//  + 1: only fatal errors are logged (and are also thrown).\n//  + 2: warnings are also logged.\n//  + 3: info is also logged.\n//  + 4: for those who use CFLAGS=\"-O99\" because \"-O98\" code is just too slow.\n// \n// ### Default\n// \n//     logLevel = 2\n// \nORM.prototype.logLevel = 2;\n\n/* Used in DEBUG mode only, quit whining already */\nfunction sleep(delay) {\n\t/*\n\t * OMG, a blocking operation in node.js, the developer of this package\n\t * must be such a useless n00b right?  Just like those damn kernel\n\t * developers who use `goto`...\n\t */\n\tvar stop = new Date().getTime() + delay;\n\twhile (new Date().getTime() < stop) ;\n}\n\n// \n// log(level, msg)\n// ---\n// \n// Logging with pretty colours\n// \n// Logs a message at a custom level\n// \n// ### Example\n// \n//     log(cli.olive('POTATO'), 'I am a potato');\n// \nORM.prototype.log = function (level, msg) {\n\tconsole.log(cli.green('mysql-orm') + ' ' + level + ' ' + msg);\n\tif (this.debug) sleep(50);\n\treturn msg;\n}\n\n// \n// error(msg)\n// -----\n// \n// **Throws an exception**\n// \n// Logs the given message at FAIL level, then throws it as an Error, if\n// logLevel >= 1.  If logLevel !>= 1, stuff will go horribly wrong.\n// \n// ### Example\n// \n//     error('Access denied to backend database');\n// \nORM.prototype.error = function (msg) {\n\tif (this.logLevel >= 1) {\n\t\tthis.log(cli.red.bold('FAIL'), msg);\n\t\tthrow (msg instanceof Error ? msg : new Error(msg));\n\t}\n\tif (this.debug) sleep(500);\n\treturn msg;\n}\n\n// \n// warn(msg)\n// ----\n// \n// Logs the given message at WARN level.\n// \n// ### Example\n// \n//     warn('dropTables specified, dropping all tables');\n// \nORM.prototype.warn = function (msg) {\n\tif (this.logLevel >= 2) {\n\t\tthis.log(cli.yellow('WARN'), msg);\n\t}\n\tif (this.debug) sleep(250);\n\treturn msg;\n}\n\n// \n// info(msg)\n// ----\n// \n// Logs the given message at INFO level.\n// \n// ### Example\n// \n//     info('Executing query ' + sql);\n// \nORM.prototype.info = function (msg) {\n\tif (this.logLevel >= 3) {\n\t\tthis.log(cli.cyan('INFO'), msg);\n\t}\n\treturn msg;\n}\n\n// \n// test(msg)\n// ----\n// \n// Logs the given message at TEST level.\n// \n// ### Example\n// \n//     test('Running test #32');\n// \nORM.prototype.test = function (msg) {\n\tthis.log(cli.magenta('TEST'), msg);\n\treturn msg;\n}\n","/home/travis/build/npmtest/node-npmtest-mysql-orm/node_modules/mysql-orm/logging-query.js":"'use strict';\n/*\n * MySQL object-relational mapping\n * ===============================\n *\n * (C) 2014 Mark K Cowan <mark@battlesnake.co.uk>\n *\n * https://github.com/battlesnake/node-mysql-orm\n *\n * Released under GNU General Public License, Version 2\n *\n */\n\nvar mysql = require('mysql');\nvar cli = require('cli-color');\nvar _ = require('underscore');\n\nvar utils = require('./utils');\nvar indent = utils.indent;\n\nvar ORM = { prototype: {} };\nmodule.exports = ORM.prototype;\n\n// logging-query\n// =============\n// Makes query diagnostics really easy\n//\n\n// \n// loggedQuery(connection)\n// -----------\n// \n// Query logging\n// \n// Creates a wrapper around a pool/connection query function\n// \n// query is function with same signatures as mysql's connection.query\n// \n// Each call to loggedQuery generated a logging function with a different cid\n// value.  Each call to the returned query function increases the qid value\n// associated with that cid.\n// \n// ### Example\n//     query = loggedQuery(connection)\n// \nvar cid_static = 0;\nORM.prototype.loggedQuery = function (connection) {\n\tvar qid_static = 0;\n\tvar cid = String(cid_static++);\n\tvar self = this;\n\tfunction query(query_format, params, callback) {\n\t\tvar qid = String(qid_static++);\n\t\tvar qidstr = cli.magenta('cid:' + cid + ', qid:' + qid) + Array((cid + qid).length < 6 ? 6 - (cid + qid).length : 1).join(' ');\n\t\tvar log = function (left, value) {\n\t\t\tself.info(qidstr + left + (value.indexOf('\\n') === -1 ? value : '\\n' + indent(value).replace(/\\t/g, '    ')));\n\t\t};\n\t\tvar sql = mysql.format(query_format, params);\n\t\tif (!_(query_format).isString() || params) {\n\t\t\tlog('query  = ', (_(query_format).isString() ? query_format : JSON.stringify(query_format)));\n\t\t\tlog('params = ', JSON.stringify(params));\n\t\t\tlog('sql    = ', sql);\n\t\t}\n\t\telse {\n\t\t\tlog('sql = ', sql);\n\t\t}\n\t\tconnection.query(sql, function (err) {\n\t\t\tif (err) {\n\t\t\t\tself[self.ready ? 'warn' : 'error'](qidstr + 'error = ' + JSON.stringify(err) + '; sql=\\n' + indent(sql));\n\t\t\t}\n\t\t\tcallback.apply(null, arguments);\n\t\t});\n\t};\n\tquery._cid = cid;\n\tquery._msg = function (str) {\n\t\treturn cli.magenta('cid:' + cid + '     ') + Array(cid.length < 6 ? 6 - cid.length : 1).join(' ') + ' ' + str;\n\t};\n\treturn query;\n};\n","/home/travis/build/npmtest/node-npmtest-mysql-orm/node_modules/mysql-orm/transaction.js":"'use strict';\n\n/*\n * MySQL object-relational mapping\n * ===============================\n *\n * (C) 2014 Mark K Cowan <mark@battlesnake.co.uk>\n *\n * https://github.com/battlesnake/node-mysql-orm\n *\n * Released under GNU General Public License, Version 2\n *\n */\n\nvar cli = require('cli-color');\n\nvar ORM = { prototype: {} };\nmodule.exports = ORM.prototype;\n\n// beginTransaction(callback)\n// ----------------\n// \n// Acquires a connection [from the pool if pooled] and begins a transaction\n// \n// The connection is released back to the pool after rollback or after a\n// successful commit [if pooled].\n// \n// callback = function (err, { connection, query, commit, rollback })\n// \n//  + connection: database connection\n//  + query: connection.query (tapped for logging)\n//  + commit: function (callback(err))\n//  + rollback function (callback(err))\n// \nORM.prototype.beginTransaction = function (callback) {\n\tvar self = this;\n\tvar pooled = this.connection.getConnection;\n\tif (pooled) {\n\t\tthis.connection.getConnection(gotConnection);\n\t}\n\telse {\n\t\tgotConnection(this.conncetion);\n\t}\n\tfunction gotConnection(err, connection) {\n\t\tif (err) {\n\t\t\treturn callback(err);\n\t\t}\n\t\tconnection.beginTransaction(function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\tvar transaction = {};\n\t\t\ttransaction.connection = connection;\n\t\t\ttransaction.query = self.loggedQuery(connection);\n\t\t\ttransaction.released = false;\n\t\t\ttransaction.release = function () {\n\t\t\t\tif (!pooled) {\n\t\t\t\t\treturn self.info('Attempted to release a connection that isn\\'t pooled');\n\t\t\t\t}\n\t\t\t\tif (transaction.released) {\n\t\t\t\t\treturn self.warn('Attempted to release an already released connection');\n\t\t\t\t}\n\t\t\t\tconnection.release();\n\t\t\t\ttransaction.released = true;\n\t\t\t};\n\t\t\ttransaction.commit = function (callback) {\n\t\t\t\tself.info(transaction.query._msg(cli.cyan('Commit transaction')));\n\t\t\t\tconnection.commit(function (err) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tself.warn(transaction.query._msg('Commit failed: ' + err));\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\t\t\t\t\ttransaction.release();\n\t\t\t\t\tcallback(null);\n\t\t\t\t});\n\t\t\t};\n\t\t\ttransaction.rollback = function (callback) {\n\t\t\t\tself.info(transaction.query._msg(cli.cyan('Rollback transaction')));\n\t\t\t\tconnection.rollback(function (err) {\n\t\t\t\t\ttransaction.release();\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tself.warn(transaction.query._msg('Rollback failed: ' + err));\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\t\t\t\t\tcallback(null);\n\t\t\t\t});\n\t\t\t};\n\t\t\tself.info(transaction.query._msg(cli.cyan('Begin transaction')));\n\t\t\tcallback(null, transaction);\n\t\t});\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-mysql-orm/node_modules/mysql-orm/foreign-keys.js":"'use strict';\n/*\n * MySQL object-relational mapping\n * ===============================\n *\n * (C) 2014 Mark K Cowan <mark@battlesnake.co.uk>\n *\n * https://github.com/battlesnake/node-mysql-orm\n *\n * Released under GNU General Public License, Version 2\n *\n */\n\nvar mysql = require('mysql');\nvar _ = require('underscore');\nvar async = require('async');\n\nvar utils = require('./utils');\nvar sql = require('./sql');\n\nvar names = utils.names;\nvar parse_args = utils.parse_args;\n\nvar ORM = { prototype: {} };\nmodule.exports = ORM.prototype;\n\n// foreign-keys\n// ============\n// Foreign key support\n// \n// The options query parameter is a function (format, params, callback),\n// such as the mysql connection.query method.  This allows intercepting of\n// queries (e.g. for logging) and transactional operations even when the ORM\n// is using a connection pool.\n//\n\n// \n// listForeignKeys(table)\n// ---------------\n// \n// Returns an array of names of fields in the table which have a foreign key\n// constraint.\n// \n// ### Example\n// \n//     var names = listForeignKeys(schema.users);\n// \nORM.prototype.listForeignKeys = function (table) {\n\tif (_(table).isString()) {\n\t\ttable = this.schema[table];\n\t}\n\treturn names(table).filter(function (col) { return !!table[col].references; });\n};\n\n// \n// lookupForeignId([query] field criteria [options] callback)\n// ---------------\n// \n// Looks up the id of the parent record, identified by search criteria. Returns\n// an error if no or if multiple parent records are found.  In such a case, the\n// second callback paremeter is zero or two for no or multiple records found.\n// \n// ### Example\n// \n//     lookupForeignKey(schema.users.country, { name: 'Estonia' },\n//       function (err, value) { ... });\n// \nORM.prototype.lookupForeignId = function () {\n\tvar args = parse_args(this, arguments, true);\n\tvar query = args.query;\n\tvar field = args.field;\n\tvar criteria = args.data;\n\tvar options = args.options;\n\tvar callback = args.callback;\n\tvar self = this;\n\tvar foreign = field.references;\n\tasync.parallel([\n\t\t\tasync.apply(sql.select, this, [foreign.$name]),\n\t\t\tasync.apply(sql.from, this, foreign.$table),\n\t\t\tasync.apply(sql.where, this, query, foreign.$table, criteria),\n\t\t\tasync.apply(sql.limit, this, { count: 2 })\n\t\t],\n\t\tfunction (err, sqlParts) {\n\t\t\tquery(_(sqlParts).compact().join('\\n'), null, function (err, rows) {\n\t\t\t\tif (err) {\n\t\t\t\t\tself.warn('Error occurred while looking up foreign id');\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\t\t\t\tif (rows.length !== 1) {\n\t\t\t\t\treturn callback(new Error(self.warn(\n\t\t\t\t\t\t\t\t(rows.length > 1 ? 'Multiple' : 'No') +\n\t\t\t\t\t\t\t\t' foreign ids found')),\n\t\t\t\t\t\t\t\trows.length);\n\t\t\t\t}\n\t\t\t\tvar row = rows[0];\n\t\t\t\tcallback(null, row[foreign.$name]);\n\t\t\t});\n\t\t});\n};\n\n// \n//  lookupForeignIds([query] table row [options] callback)\n//  ----------------\n// \n// Looks up all foreign key values for a row\n// \n// Any foreign-key fields in row which contain an object are assumed to be\n// search criteria.  lookupForeignId is used to fill in their corresponding id\n// values.  Those values of row are replaced with the id values, then the same\n// (modified) row object is passed to the callback.\n// \n// ### Example\n// \n//     lookupForeignIds(schema.users,\n//       {\n//         name: 'mark',\n//         country: { name: 'Estonia' },\n//         role: { name: 'admin' }\n//       },\n//       function (err, value) { ... });\n// \n//     // value.country = 372, value.role = <some id value>\n// \nORM.prototype.lookupForeignIds = function () {\n\tvar args = parse_args(this, arguments);\n\tvar query = args.query;\n\tvar table = args.table;\n\tvar row = args.data;\n\tvar callback = args.callback;\n\tvar options = args.options;\n\tvar self = this;\n\tvar cols = options.cols || this.listForeignKeys(table);\n\tasync.each(cols,\n\t\tfunction (col, callback) {\n\t\t\tvar field = table[col];\n\t\t\tif (!field) {\n\t\t\t\tthrow new Error('Field \"' + col + '\" not found in table \"' +\n\t\t\t\t\ttable.$name + '\"');\n\t\t\t}\n\t\t\tvar value = row[col];\n\t\t\tif (!_(value).isObject()) {\n\t\t\t\treturn callback(null);\n\t\t\t}\n\t\t\tself.lookupForeignId(query, field, value, function (err, res) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\t\t\t\trow[col] = res;\n\t\t\t\tcallback(null);\n\t\t\t});\n\t\t},\n\t\tfunction (err) {\n\t\t\tcallback(err, row);\n\t\t});\n};\n\n// lookupForeignValue([query] field id [options] callback)\n// ----------------\n// Get the data corresponding to a given ID value in a foreign key ralationship\n//\nORM.prototype.lookupForeignValue = function () {\n\tvar args = parse_args(this, arguments, true);\n\tvar query = args.query;\n\tvar field = args.field;\n\tvar id = args.data;\n\tvar callback = args.callback;\n\tvar options = args.options;\n\tvar self = this;\n\tvar foreign = field.references;\n\tvar criteria = _.object([foreign.$name], [id]);\n\tthis.load(query, foreign.$table, criteria, options, function (err, res) {\n\t\tif (err) {\n\t\t\tself.warn('Error occurred while looking up foreign row');\n\t\t\treturn callback(err);\n\t\t}\n\t\tcallback(null, res);\n\t});\n};\n\n//\n// lookupForeignValues([query] table row [options] callback)\n// ----------------\n// Uses lookupForeignValue to get data for fields which have foreign key\n// relationships\n//\nORM.prototype.lookupForeignValues = function () {\n\tvar args = parse_args(this, arguments);\n\tvar query = args.query;\n\tvar table = args.table;\n\tvar row = args.data;\n\tvar callback = args.callback;\n\tvar options = args.options;\n\tvar cols = options.cols || this.listForeignKeys(table);\n\tvar self = this;\n\tasync.each(cols,\n\t\tfunction (col, callback) {\n\t\t\tvar field = table[col], id = row[col], foreign = field.references;\n\t\t\tif (_(id).isNull() || _(id).isObject()) {\n\t\t\t\treturn callback(null);\n\t\t\t}\n\t\t\tself.lookupForeignValue(query, field, id, options, function (err, res) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\t\t\t\trow[col] = res;\n\t\t\t\tcallback(null);\n\t\t\t});\n\t\t},\n\t\tfunction (err) {\n\t\t\tcallback(err, row);\n\t\t});\n};\n","/home/travis/build/npmtest/node-npmtest-mysql-orm/node_modules/mysql-orm/sql.js":"'use strict';\n\n/*\n * MySQL object-relational mapping\n * ===============================\n *\n * (C) 2014 Mark K Cowan <mark@battlesnake.co.uk>\n *\n * https://github.com/battlesnake/node-mysql-orm\n *\n * Released under GNU General Public License, Version 2\n *\n */\n\nvar mysql = require('mysql');\nvar async = require('async');\nvar _ = require('underscore');\n\nvar utils = require('./utils');\nvar names = utils.names;\nvar shift = utils.shift;\n\n// sql\n// ===\n// SQL clause generators\n//\n\n// \n// SELECT <fields>\n// ------\n// \n// `$fields` can contain a mix of field references and field names.\n// Defaults to '*' if no fields are specified.\n// \nmodule.exports.select = function (self, fields, callback) {\n\tif (fields) {\n\t\tfields = fields.map(\n\t\t\tfunction (field) {\n\t\t\t\tif (field.$type === 'field') {\n\t\t\t\t\treturn field.$name;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn field;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\treturn callback(null, mysql.format('SELECT ??', [fields]));\n\t}\n\telse {\n\t\treturn callback(null, 'SELECT *');\n\t}\n};\n\n// \n// DELETE\n// ------\n// \n// No point making this async-style, it can never take parameters.  QUICK and\n// IGNORE are irrelevant as performance is not an objective of this package.\n// \n// Then again, I like having my clause lists in async.parallel, and as stated,\n// performance is not important in this library, so \"async style\" it is.\n// \nmodule.exports.delete = function (callback) {\n\tcallback(null, 'DELETE');\n}\n\n// \n// table name\n// ----------\n// \n// Table can be a string or a table reference.\n// \nfunction tableName(table, callback) {\n\tif (_(table).isString()) {\n\t\treturn callback(null, mysql.escapeId(table));\n\t}\n\telse if (table.$type === 'table') {\n\t\treturn callback(null, mysql.escapeId(table.$name));\n\t}\n\telse {\n\t\treturn callback(new Error('Unknown table specification: \"' + table +\n\t\t\t'\"'));\n\t}\n}\n\n// \n// INSERT INTO <table name>\n// -----------\n// \n// Table can be a table reference or a table name.\n// \nmodule.exports.insertInto = function (self, table, callback) {\n\ttableName(table, function (err, res) {\n\t\tif (err) {\n\t\t\treturn callback(err);\n\t\t}\n\t\tcallback(null, 'INSERT INTO ' + res);\n\t});\n};\n\n// \n// UPDATE <table name>\n// ------\n// \n// Table can be a table reference or a table name.\n// \nmodule.exports.update = function (self, table, callback) {\n\ttableName(table, function (err, res) {\n\t\tif (err) {\n\t\t\treturn callback(err);\n\t\t}\n\t\tcallback(null, 'UPDATE ' + res);\n\t});\n};\n\n// \n// FROM <table name>\n// ----\n// \n// Table can be a table reference or a table name.\n// \nmodule.exports.from = function (self, table, callback) {\n\ttableName(table, function (err, res) {\n\t\tif (err) {\n\t\t\treturn callback(err);\n\t\t}\n\t\tcallback(null, 'FROM ' + res);\n\t});\n};\n\n// \n// WHERE <criteria>\n// -----\n// \n// Properties of criteria are used to generate search constraints.  Foreign row\n// IDs are looked up where necessary to generate these constraints.\n// \nmodule.exports.where = function (self, query, table, criteria, callback) {\n\tvar cols = _(criteria).keys();\n\tcriteria = _(criteria).clone();\n\tif (table.$primary.length === 1 && _(criteria).has(table.$primary)) {\n\t\tvar primary = table.$primary[0];\n\t\tcriteria = _.object([primary], [criteria[primary]]);\n\t\tcols = [primary]\n\t}\n\tif (cols.length) {\n\t\tif (_(table).isString()) {\n\t\t\ttable = self.schema[table];\n\t\t}\n\t\tvar refs = self.listForeignKeys(table);\n\t\tif (refs.length) {\n\t\t\tself.lookupForeignIds(query, table, criteria, { cols: cols }, function (err, res) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\t\t\t\tgenerateClause(res);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tgenerateClause(criteria);\n\t\t}\n\t}\n\telse {\n\t\treturn callback(null);\n\t}\n\tfunction generateClause(row) {\n\t\tcols.forEach(function (fieldName) {\n\t\t\tvar field = table[fieldName];\n\t\t\tif (field.serialize) {\n\t\t\t\trow[fieldName] = field.serialize(row[fieldName]);\n\t\t\t}\n\t\t});\n\t\treturn callback(null,\n\t\t\t'WHERE\\n\\t' + cols\n\t\t\t\t.map(function (col) {\n\t\t\t\t\treturn mysql.format('??=?', [col, row[col]]);\n\t\t\t\t})\n\t\t\t\t.join(' AND\\n\\t'));\n\t}\n};\n\n// \n// ORDER BY <field [direction]>\n// --------\n// \n// criteria.$sort property, or (as fallback) table.$sort are used to generate\n// sorting instructions.  $sort can be a field name/reference or an array of\n// such.  Begin field names with +/- to specify ascending or descending sort\n// order.\n// \nmodule.exports.orderby = function (self, table, sort, callback) {\n\tvar sort = sort || table.$sort || [];\n\tif (sort.length) {\n\t\tif (_(sort).isString()) {\n\t\t\tsort = [sort];\n\t\t}\n\t\treturn callback(null, 'ORDER BY\\n\\t' + sort.map(function (field) {\n\t\t\tif (field.$type === 'field') {\n\t\t\t\tfield = field.$name;\n\t\t\t}\n\t\t\tif (!_(field).isString()) {\n\t\t\t\treturn callback(new Error('$sort must either be a field ' +\n\t\t\t\t\t'name a field reference, or an array of field ' +\n\t\t\t\t\t'names/references'));\n\t\t\t}\n\t\t\tif (field.charAt(0) === '-') {\n\t\t\t\treturn mysql.escapeId(field.substr(1)) + ' DESC';\n\t\t\t}\n\t\t\telse if (field.charAt(0) === '+') {\n\t\t\t\treturn mysql.escapeId(field.substr(1)) + ' ASC';\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn mysql.escapeId(field);\n\t\t\t}\n\t\t}).join(',\\n\\t'));\n\t}\n\telse {\n\t\treturn callback(null);\n\t}\n};\n\n// \n// LIMIT <count> [OFFSET <start>]\n// -----\n// \n// Uses a combination of $first, $last and $count to generate a LIMIT clause.\n// \nmodule.exports.limit = function (self, options, callback) {\n\tvar lparams =\n\t\t_(options).has('first')?1:0 +\n\t\t_(options).has('count')?2:0 +\n\t\t_(options).has('last') ?4:0;\n\tvar first = options.first, last = options.last, count = options.count;\n\tswitch (lparams) {\n\t\tcase 0: return callback(null);\n\t\tcase 1: return callback(new Error('first value for LIMIT specified, but no last or count value'));\n\t\tcase 2: return callback(null, mysql.format('LIMIT ?', [count])); break;\n\t\tcase 3: return callback(null, mysql.format('LIMIT ?\\nOFFSET ?', [count, first])); break;\n\t\tcase 4:\treturn callback(new Error('last value for LIMIT specified, but no first or count value'));\n\t\tcase 5: return callback(null, mysql.format('LIMIT ?\\nOFFSET ?', [last - first, first])); break;\n\t\tcase 6: return callback(null, mysql.format('LIMIT ?\\nOFFSET ?', [count, last - count])); break;\n\t\tcase 7: return callback(new Error('first, last, count were all specified for LIMIT'));\n\t}\n};\n\n// \n// ON DUPLICATE KEY UPDATE <name = VALUES(name), ...>\n// -----------------------\n// \n// Generates a list of copy assignments\n// \nmodule.exports.onDuplicateKeyUpdate = function (self, keys, callback) {\n\tcallback(null,\n\t\t'ON DUPLICATE KEY UPDATE\\n\\t' + keys.map(\n\t\t\tfunction (key) {\n\t\t\t\treturn mysql.format('?? = VALUES(??)', [key, key]);\n\t\t\t}\n\t\t).join(',\\n\\t'));\n};\n\n// \n// SET <name = value, ...>\n// ---\n// \n// Generates a list of assignments\n// \nmodule.exports.set = function (self, keys, row, callback) {\n\tif (!keys) {\n\t\tkeys = names(row);\n\t}\n\tcallback(null,\n\t\t'SET\\n\\t' + keys.map(\n\t\t\tfunction (key) {\n\t\t\t\treturn mysql.format('?? = ?', [key, row[key]]);\n\t\t\t}\n\t\t).join(',\\n\\t'));\n};\n","/home/travis/build/npmtest/node-npmtest-mysql-orm/node_modules/mysql-orm/save.js":"'use strict';\n\n/*\n * MySQL object-relational mapping\n * ===============================\n *\n * (C) 2014 Mark K Cowan <mark@battlesnake.co.uk>\n *\n * https://github.com/battlesnake/node-mysql-orm\n *\n * Released under GNU General Public License, Version 2\n *\n */\n\nvar mysql = require('mysql');\nvar async = require('async');\nvar _ = require('underscore');\n\nvar utils = require('./utils');\nvar sql = require('./sql');\n\nvar names = utils.names;\nvar parse_args = utils.parse_args;\n\nvar ORM = { prototype: {} };\nmodule.exports = ORM.prototype;\n\n// save\n// ====\n// Saves data to the database\n//\n// NOTE: REPLACE will not be supported as it (quite rightly) wrecks foreign\n// keys.  if you want to replace, do a delete followed by a save.\n//\n\n// \n// save([query] table row [options] callback)\n// ----\n// \n// Save a single row to table, updating when the primary key value matches an\n// existing row and inserting otherwise.  Foreign key values are looked up\n// automatically.\n// \n//  + table - A table definition from the schema.\n//  + row - An object representing the values to save.  Foreign key values\n//    are resolved, see the foreign-keys module for more information.\n//  + options\n//     + save - Specifies whether save can create/overwrite rows.\n//        + 'new' - Only create a new row, fail on existing id\n//        + 'existing' - Only update existing row, fail if id is not found\n//        + 'always' (default) - create or update\n// \n// ### Example which creates a new record\n// \n//     // The following adds a new record as no primary key id was specified\n//     save(\n//       schema.users,\n//       {\n//         name: 'mark',\n//         role: { value: 'admin' },\n//         country: { value: 'Lithuania' }\n//       },\n//       function (err) { ... });\n// \n// ### Example which saves to existing record, or creates new one if not found\n// \n//     // The following will update an existing record if the id already\n//     // exists in the table, otherwise it will insert a new record\n//     save(\n//       schema.users,\n//       {\n//         id: 1,\n//         name: 'mark',\n//         role: { value: 'admin' },\n//         country: { value: 'Lithuania' }\n//       },\n//       function (err) { ... });\n// \nORM.prototype.save = function () {\n\tvar args = parse_args(this, arguments);\n\tvar query = args.query;\n\tvar table = args.table;\n\tvar originalRow = args.data;\n\tvar options = args.options;\n\tvar callback = args.callback;\n\tvar self = this;\n\tvar row = _(originalRow).clone();\n\tasync.waterfall([\n\t\t\tfunction (callback) {\n\t\t\t\t/* Serialize */\n\t\t\t\t_(table).keys().forEach(function (key) {\n\t\t\t\t\tif (table[key].serialize) {\n\t\t\t\t\t\trow[key] = table[key].serialize(row[key]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t/* Lookup reference IDs */\n\t\t\t\tself.lookupForeignIds(query, table, row, function (err, res) {\n\t\t\t\t\t\trow = res;\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t});\n\t\t\t},\n\t\t\tfunction (callback) {\n\t\t\t\tvar saveMode = options.save || 'always';\n\t\t\t\tif (saveMode === 'always') {\n\t\t\t\t\tasync.parallel([\n\t\t\t\t\t\t\tasync.apply(sql.insertInto, self, table),\n\t\t\t\t\t\t\tasync.apply(sql.set, self, names(row), row),\n\t\t\t\t\t\t\tasync.apply(sql.onDuplicateKeyUpdate, self,\n\t\t\t\t\t\t\t\t_(names(row)).without(table.$primary))\n\t\t\t\t\t\t],\n\t\t\t\t\t\tfunction (err, data) {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\texecQuery(data.join('\\n'));\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse if (saveMode === 'new') {\n\t\t\t\t\tasync.parallel([\n\t\t\t\t\t\t\tasync.apply(sql.insertInto, self, table),\n\t\t\t\t\t\t\tasync.apply(sql.set, self, names(row), row),\n\t\t\t\t\t\t],\n\t\t\t\t\t\tfunction (err, data) {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\texecQuery(data.join('\\n'));\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse if (saveMode === 'existing') {\n\t\t\t\t\tif (table.$primary.length === 0) {\n\t\t\t\t\t\treturn callback(new Error('Cannot save to existing ' +\n\t\t\t\t\t\t\t'row: table has no primary key'));\n\t\t\t\t\t}\n\t\t\t\t\tvar criteria = _(row).pick(table.$primary);\n\t\t\t\t\tasync.parallel([\n\t\t\t\t\t\t\tasync.apply(sql.update, self, table),\n\t\t\t\t\t\t\tasync.apply(sql.set, self, _(names(row)).without(table.$primary), row),\n\t\t\t\t\t\t\tasync.apply(sql.where, self, query, table, criteria)\n\t\t\t\t\t\t],\n\t\t\t\t\t\tfunction (err, data) {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\texecQuery(data.join('\\n'));\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn callback(new Error('Unknown save mode: ' + saveMode));\n\t\t\t\t}\n\t\t\t\t/* Executes the query */\n\t\t\t\tfunction execQuery(sql) {\n\t\t\t\t\tquery(sql, null, function (err, res) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (res.affectedRows === 0) {\n\t\t\t\t\t\t\treturn callback(new Error('Failed to save row ' +\n\t\t\t\t\t\t\t\t'with mode ' + saveMode));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (_(res).has('insertId')) {\n\t\t\t\t\t\t\toriginalRow[table.$auto_increment] = res.insertId;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\tfunction (err) { callback(err); });\n};\n\n// \n// saveMany([query] table rows [options] callback)\n// --------\n// \n// Resolves foreign key values and saves sets of rows to the database\n// \n// Saves a load of rows to the table, updating when the primary key value\n// matches an existing row and inserting otherwise.  Foreign key values are\n// looked up automatically.  Internally, this calls save.\n// \n//  + table - A table definition from the schema.\n//  + rows - An array of rows to save.  Foreign key values are resolved, see the\n//    foreign-keys module for more information.\n//  + options - see documentation for save()\n// \n// ### Example\n// \n//     saveMany(\n//       schema.users,\n//       [\n//         {\n//           id: 1,\n//           name: 'mark',\n//           country: { value: 'United Kingdom' },\n//           role: { value: 'admin' }\n//         },\n//         {\n//           id: 2,\n//           name: 'marili',\n//           country: { value: 'Estonia' },\n//           role: { value: 'ploom' },\n//         },\n//       ],\n//       { save: 'existing' },\n//       function (err) { .. });\n// \nORM.prototype.saveMany = function () {\n\tvar args = parse_args(this, arguments);\n\tvar query = args.query;\n\tvar table = args.table;\n\tvar rows = args.data;\n\tvar options = args.options;\n\tvar callback = args.callback;\n\tvar self = this;\n\tasync.each(rows,\n\t\tfunction (row, callback) {\n\t\t\tself.save(query, table, row, options, callback);\n\t\t},\n\t\tfunction (err) { callback(err); });\n};\n\n// \n// saveMultipleTables(data, callback)\n// ------------------\n// \n// Save sets of rows to several tables, looking up foreign keys where needed.\n// \n//  + data - An object of the form { tableName: rows, tableName: rows, ... }.\n//    \n// Note: tables are procesed in the order that their fields appear in the data\n// object.  This relies on V8 honouring field order, which ECMAScript specs do\n// not require it to do.  This also makes circular dependencies on foreign keys\n// impossible to process with a single call to this function.  Internally, this\n// calls saveMany.\n// \n// ### Example\n// \n//     saveMultipletables(\n//       {\n//         countries: [\n//           { id: 44, name: 'United Kingdom' },\n//           { id: 372, name: 'Estonia' }],\n//         roles: [\n//           { name: 'admin', rights: '*' },\n//           { name: 'ploom', rights: 'being_awesome,being_a_ploom' }],\n//         users: [\n//           { \n//             name: 'mark',\n//             country: { name: 'United Kingdom' },\n//             role: { name: 'admin' }\n//           },\n//           {\n//             name: 'marili',\n//             country: { name: 'Estonia' },\n//             role: { name: 'ploom' }\n//           }]\n//       },\n//       function (err) { ... });\n// \nORM.prototype.saveMultipleTables = function (data, callback) {\n\tvar self = this;\n\tthis.beginTransaction(function (err, transaction) {\n\t\tif (err) {\n\t\t\treturn callback(err);\n\t\t}\n\t\tasync.series([\n\t\t\t\tfunction (callback) {\n\t\t\t\t\tasync.eachSeries(names(data),\n\t\t\t\t\t\tfunction (tableName, callback) {\n\t\t\t\t\t\t\tif (data[tableName]) {\n\t\t\t\t\t\t\t\tself.saveMany(transaction.query, tableName, data[tableName], callback);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcallback);\n\t\t\t\t},\n\t\t\t\ttransaction.commit\n\t\t\t],\n\t\t\tfunction (err) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn transaction.rollback(function () { callback(err); });\n\t\t\t\t}\n\t\t\t\tcallback(null);\n\t\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-mysql-orm/node_modules/mysql-orm/load.js":"'use strict';\n/*\n * MySQL object-relational mapping\n * ===============================\n *\n * (C) 2014 Mark K Cowan <mark@battlesnake.co.uk>\n *\n * https://github.com/battlesnake/node-mysql-orm\n *\n * Released under GNU General Public License, Version 2\n *\n */\n\nvar mysql = require('mysql');\nvar async = require('async');\nvar _ = require('underscore');\n\nvar sql = require('./sql');\nvar utils = require('./utils');\n\nvar names = utils.names;\nvar parse_args = utils.parse_args;\n\nvar ORM = { prototype: {} };\nmodule.exports = ORM.prototype;\n\n// load\n// ====\n// Routines for loading data from the database\n//\n\n// \n// load([query] table [id|criteria] callback)\n// ----\n// \n// Retrieves a single row from table where the id matches the id parameter, or\n// where the criteria matches.  Returns an error if more than one row was\n// returned, and null if none were.\n//\n//  + table - Table name or reference\n//  + id - Row ID (primary key value)\n//  + criteria - Object containing search criteria\n//  + callback - (err, row)\n//\n// If now row is found, then an error is returned and row === false.  For other\n// errors, row is undefined.\n// \n// Same usage as loadMany but obviously the LIMIT specifiers are not used.\n// \nORM.prototype.load = function () {\n\tvar args = parse_args(this, arguments);\n\tvar query = args.query;\n\tvar table = args.table;\n\tvar criteria = args.data;\n\tvar callback = args.callback;\n\tvar self = this;\n\tthis.loadMany(table, criteria, { count: 2 }, function (err, res) {\n\t\tif (err) {\n\t\t\treturn callback(err);\n\t\t}\n\t\tif (res.length === 0) {\n\t\t\treturn callback(new Error('Item not found'), null);\n\t\t}\n\t\telse if (res.length > 1) {\n\t\t\treturn callback(new Error('Multiple rows were returned for GET ' +\n\t\t\t\t'operation on table '+table.$name+' with criteria ' +\n\t\t\t\tJSON.stringify(criteria)));\n\t\t}\n\t\tcallback(null, res[0]);\n\t});\n};\n\n// \n// loadMany([query] table [criteria [options] ] callback)\n// --------\n// \n// Retrieves all rows from table which match the criteria.\n//\n//  + table - Ttble name or reference\n//  + criteria - Object containing search criteria\n//  + options - Extra query options\n//     + lookup (default: true) - Specifies whether to lookup records related\n//       over foreign keys.  TODO: Number to specify lookup depth.\n//     + fields - Array of names of fields to retrieve.  All fields are\n//       retrieved if this is not specified.\n//     + sort - Name of field to sort on, or array of fields to sort on.  Prefix\n//       a `+` or `-` to the field name to specify ascending or descending\n//       order.  You may specify field objects or field names or a mix of both.\n//     + first, last, count - Limit the range of records retrieved.  Any\n//       combination which allows `count` to be calculated is valid.\n//  + callback - (err, rows)\n//    \n// ### Example:\n// \n//     loadMany(\n//       schema.users,\n//       {\n//         // role is a foreign key: pass an object as the value to have it\n//         // looked up in the parent table.  Non-object values will be treated\n//         // as raw values in this table and will not be looked up in the\n//         // parent table.  Cry me a river if you want a field value returned\n//         // instead of an object, but this allows one to look up a record by\n//         //  ID number on a foreign field, in addition to enjoying the lovely\n//         // foreign-key handling provided by this library/framework/module.\n//         role: { value: 'admin' }\n//      },\n//      {\n//         fields: { 'name', schema.users.id, schema.users.country },\n//         sort: schema.users.name,  //or '+name'\n//         count: 10\n//       },\n//       function (err, rows) {\n//         if (err) throw err;\n//         rows.forEach(function (row) {\n//           console.log(\n//             'Admin #' + row.id + ' ' +\n//             '\"' + row.name + '\" ' +\n//             'is from ' + row.country.value);\n//         });\n//       });\n// \n// \nORM.prototype.loadMany = function () {\n\tvar args = parse_args(this, arguments);\n\tvar query = args.query;\n\tvar table = args.table;\n\tvar criteria = args.data;\n\tvar options = args.options;\n\tvar callback = args.callback;\n\tvar self = this;\n\tvar lookup = !_(options).has('lookup') || criteria.lookup;\n\tasync.parallel([\n\t\t\tasync.apply(sql.select, this, options.fields),\n\t\t\tasync.apply(sql.from, this, table),\n\t\t\tasync.apply(sql.where, this, query, table, criteria),\n\t\t\tasync.apply(sql.orderby, this, table, options.sort),\n\t\t\tasync.apply(sql.limit, this, options)\n\t\t\t/*\n\t\t\t * TODO: JOINs so we can get the foreign key stuff in one operation\n\t\t\t * instead of running several SELECTs on every row which is obviously\n\t\t\t * going to be insanely slow for large datasets.\n\t\t\t */\n\t\t],\n\t\tfunction (err, sqlParts) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\tquery(_(sqlParts).compact().join('\\n'), null, function (err, rows) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\t\t\t\tif (!lookup) {\n\t\t\t\t\treturn callback(null, rows);\n\t\t\t\t}\n\t\t\t\tasync.each(rows,\n\t\t\t\t\tfunction (row, callback) {\n\t\t\t\t\t\t/* Deserialize */\n\t\t\t\t\t\tnames(table).forEach(function (key) {\n\t\t\t\t\t\t\tif (table[key].deserialize) {\n\t\t\t\t\t\t\t\trow[key] = table[key].deserialize(row[key]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\t/* Lookup references */\n\t\t\t\t\t\tself.lookupForeignValues(query, table, row, options,\n\t\t\t\t\t\t\tcallback);\n\t\t\t\t\t},\n\t\t\t\t\tfunction (err) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallback(null, rows);\n\t\t\t\t\t});\n\t\t\t});\n\t\t});\n};\n","/home/travis/build/npmtest/node-npmtest-mysql-orm/node_modules/mysql-orm/delete.js":"'use strict';\n/*\n * MySQL object-relational mapping\n * ===============================\n *\n * (C) 2014 Mark K Cowan <mark@battlesnake.co.uk>\n *\n * https://github.com/battlesnake/node-mysql-orm\n *\n * Released under GNU General Public License, Version 2\n *\n */\n\nvar mysql = require('mysql');\nvar async = require('async');\nvar _ = require('underscore');\n\nvar sql = require('./sql');\nvar utils = require('./utils');\n\nvar names = utils.names;\nvar parse_args = utils.parse_args;\n\nvar ORM = { prototype: {} };\nmodule.exports = ORM.prototype;\n\n// delete\n// ======\n// Deletes data from the database\n\n// \n// delete([query] table id|criteria callback)\n// ----------\n// \n// Delete one row from a table\n//\n//  + table - Table name or reference\n//  + id - Row ID (primary key value)\n//  + criteria - Object containing search criteria\n//  + callback - (err)\n// \n// ### Example using primary key value\n// \n//     delete(schema.users, 2, function (err, res) { ... });\n// \n// ### Example using foreign value\n// \n//     delete(schema.users, { role: { name: 'guest' } }, callback);\n// \n// \nORM.prototype.delete = function () {\n\tvar args = parse_args(this, arguments);\n\tvar query = args.query;\n\tvar table = args.table;\n\tvar criteria = args.data;\n\tvar callback = args.callback;\n\tvar self = this;\n\tasync.parallel([\n\t\t\tasync.apply(sql.select, this, table.$primary),\n\t\t\tasync.apply(sql.from, this, table),\n\t\t\tasync.apply(sql.where, this, query, table, criteria),\n\t\t\tasync.apply(sql.limit, this, { count: 2})\n\t\t],\n\t\tfunction (err, sqlParts) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\tquery(_(sqlParts).compact().join('\\n'), null, function (err, res) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\t\t\t\tif (res.length === 0) {\n\t\t\t\t\treturn callback(new Error('Item not found'), false);\n\t\t\t\t}\n\t\t\t\telse if (res.length > 1) {\n\t\t\t\t\treturn callback(new Error('Multiple items matched'), true);\n\t\t\t\t}\n\t\t\t\tself.deleteMany(query, table, res[0], callback);\n\t\t\t});\n\t\t});\n};\n\n// \n// deleteMany([query] table id|criteria callback)\n// ----------\n// \n// Delete one or more rows from a table\n//\n//  + table - Table name or reference\n//  + id - Row ID (primary key value)\n//  + criteria - Object containing search criteria\n//  + callback - (err, deleted_row_count)\n// \n// ### Example using primary key value\n// \n//     deleteMany(schema.users, 2, function (err, res) { ... });\n// \n// ### Example using foreign value\n// \n//     deleteMany(schema.users, { role: { name: 'guest' } }, callback);\n// \n// \nORM.prototype.delete = function () {\n\tvar args = parse_args(this, arguments);\n\tvar query = args.query;\n\tvar table = args.table;\n\tvar criteria = args.data;\n\tvar callback = args.callback;\n\tvar self = this;\n\tasync.parallel([\n\t\t\tasync.apply(sql.delete),\n\t\t\tasync.apply(sql.from, this, table),\n\t\t\tasync.apply(sql.where, this, query, table, criteria)\n\t\t],\n\t\tfunction (err, sqlParts) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\tquery(_(sqlParts).compact().join('\\n'), null, function (err, res) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\t\t\t\treturn callback(null, res.affectedRows);\n\t\t\t});\n\t\t});\n};\n","/home/travis/build/npmtest/node-npmtest-mysql-orm/node_modules/mysql-orm/autogen.js":"'use strict';\n\n/*\n * MySQL object-relational mapping\n * ===============================\n *\n * (C) 2014 Mark K Cowan <mark@battlesnake.co.uk>\n *\n * https://github.com/battlesnake/node-mysql-orm\n *\n * Released under GNU General Public License, Version 2\n *\n */\n\nvar mysql = require('mysql');\nvar async = require('async');\nvar _ = require('underscore');\n\nvar utils = require('./utils');\nvar names = utils.names;\nvar indent = utils.indent;\n\n// autogen\n// ==========\n//\n// This module is used internally, you should never need to call it yourself.\n//\n\n// create_database\n// ---------------\n// Creates the database if needed or if recreate is requested\n//\nmodule.exports.create_database = create_database;\nfunction create_database(orm, recreate, callback) {\n\tvar queries = [];\n\tif (recreate) {\n\t\torm.warn('Recreate is specified: dropping database ' + orm.database);\n\t\tqueries.push(mysql.format('DROP DATABASE IF EXISTS ??', [orm.database]));\n\t}\n\tqueries.push(mysql.format('CREATE DATABASE IF NOT EXISTS ??', [orm.database]));\n\tqueries.push(mysql.format('USE ??', [orm.database]));\n\t/* Generate query executing functions from SQL commands */\n\tqueries = queries.map(function (sql) {\n\t\treturn function (callback) {\n\t\t\torm.query(sql, null, callback);\n\t\t};\n\t});\n\t/* Execute queries */\n\tasync.series(queries, callback);\n};\n\n// create_tables\n// -------------\n// Creates the tables if needed or if recreate is requested\nmodule.exports.create_tables = create_tables;\nfunction create_tables(orm, recreate, callback) {\n\tvar queries = [];\n\t/* Generate list of SQL commands */\n\tqueries.push('SET FOREIGN_KEY_CHECKS = 0');\n\tif (recreate) {\n\t\tvar tables = names(orm.schema);\n\t\torm.warn('Recreate is specified: dropping tables ' + tables.join(', '));\n\t\tif (tables.length) {\n\t\t\tqueries.push(mysql.format('DROP TABLE IF EXISTS ??', [tables]));\n\t\t}\n\t}\n\tnames(orm.schema).forEach(function (tableName) {\n\t\tqueries.push(create_table(orm, orm.schema[tableName]));\n\t});\n\tqueries.push('SET FOREIGN_KEY_CHECKS = 1');\n\t/* Execute queries */\n\tasync.series(\n\t\tqueries.map(function (sql) {\n\t\t\treturn async.apply(orm.query, sql, null);\n\t\t}),\n\t\tcallback);\n}\n\n// create_table\n// ------------\n// Generates a CREATE TABLE query for the given table definition\n//\nfunction create_table(orm, table) {\n\tvar columns = [];\n\tnames(table).forEach(function (fieldName) {\n\t\tcolumns.push(column_definition(orm, table[fieldName]));\n\t});\n\tif (table.$primary && table.$primary.length) {\n\t\tcolumns.push(mysql.format('PRIMARY KEY (??)', [table.$primary]));\n\t}\n\tvar lines = [];\n\tlines.push(mysql.format('CREATE TABLE IF NOT EXISTS ?? (', table.$name));\n\tlines.push(indent(columns.join(',\\n')));\n\tlines.push(');');\n\treturn lines.join('\\n');\n}\n\n// column_definition\n// -----------------\n// Generates column_definition clauses for CREATE_TABLE\n//\nfunction column_definition(orm, field) {\n\tvar lines = [];\n\tif (field.index) {\n\t\tlines.push(['INDEX ?? (??)', [field.index, field.$name]]);\n\t}\n\tif (field.unique) {\n\t\tlines.push(['CONSTRAINT ?? UNIQUE KEY (??)', [field.unique, field.$name]]);\n\t}\n\tif (field.references) {\n\t\tlines.push([[\n\t\t\t'CONSTRAINT ?? FOREIGN KEY (??)',\n\t\t\t'REFERENCES ?? (??)',\n\t\t\t'ON UPDATE ' + field.onUpdate,\n\t\t\t'ON DELETE ' + field.onDelete].join('\\n\\t'),\n\t\t\t[field.$fkname, field.$name, field.references.$table.$name,\n\t\t\tfield.references.$name]]);\n\t}\n\tlines = lines\n\t\t.map(function (ar) { return mysql.format.apply(mysql, ar); })\n\t\t.map(indent);\n\tvar def = field.default;\n\tif (_(field).has('default') && field.serialize) {\n\t\tdef = field.serialize(def);\n\t}\n\tlines.unshift(_([\n\t\tmysql.escapeId(field.$name),\n\t\tfield.type,\n\t\tfield.auto_increment && 'AUTO_INCREMENT',\n\t\t!field.nullable && 'NOT NULL',\n\t\tfield.default && ('DEFAULT ' + mysql.escape(def))\n\t]).compact().join(' '));\n\treturn lines.join(',\\n');\n};\n","/home/travis/build/npmtest/node-npmtest-mysql-orm/node_modules/mysql-orm/initialise-schema.js":"'use strict';\n\n/*\n * MySQL object-relational mapping\n * ===============================\n *\n * (C) 2014 Mark K Cowan <mark@battlesnake.co.uk>\n *\n * https://github.com/battlesnake/node-mysql-orm\n *\n * Released under GNU General Public License, Version 2\n *\n */\n\nvar mysql = require('mysql');\nvar async = require('async');\nvar _ = require('underscore');\n\nvar utils = require('./utils');\nvar names = utils.names;\nvar indent = utils.indent;\n\n// initialise-schema\n// =================\n//\n// This module is used internally, you should never need to call it yourself.\n//\n\n// initialise_schema\n// -----------------\n// Initialises the schema:\n//  + Adds references to parent items.\n//  + Stores the name of each item into the item itself.\n//  + Creates primary key field `id` on tables with no `id` field and no\n//    primary key.  Set `table.$primary = []` to disable creation of automatic\n//    primary key field.\n//  + Expands shorthand string definitions to object definitions.\n//\n// TODO: Define prototypes instead of assigning $type to each one\n//\nmodule.exports.initialise_schema = initialise_schema;\nfunction initialise_schema(orm) {\n\tvar schema = orm.schema;\n\tschema.$name = orm.database;\n\tschema.$orm = orm;\n\tschema.$fullname = '(' + orm.database + ')';\n\tschema.$type = 'schema';\n\tnames(schema).forEach(function initialise_table(tableName) {\n\t\torm.info('schema ' + tableName);\n\t\tvar table = schema[tableName];\n\t\ttable.$name = tableName;\n\t\ttable.$schema = schema;\n\t\ttable.$fullname = mysql.escapeId(tableName);\n\t\ttable.$type = 'table';\n\t\tif (!_(table).has('id') && !_(table).has('$primary')) {\n\t\t\ttable.id = { type: '::id' };\n\t\t\ttable.$primary = 'id';\n\t\t}\n\t\tif (_(table.$primary).isString()) {\n\t\t\ttable.$primary = [table.$primary];\n\t\t}\n\t\ttable.$primary = table.$primary || [];\n\t\tnames(table).forEach(function initialise_field(fieldName) {\n\t\t\torm.info('schema ' + Array(tableName.length + 1).join(' ') + '.' +\n\t\t\t\tfieldName);\n\t\t\tvar fullname = mysql.escapeId(tableName) + '.' +\n\t\t\t\tmysql.escapeId(fieldName);\n\t\t\tif (_(table[fieldName]).isString()) {\n\t\t\t\ttable[fieldName] = expand_field_shorthand_definition(orm,\n\t\t\t\t\tfullname, table[fieldName]);\n\t\t\t}\n\t\t\tvar field = table[fieldName];\n\t\t\tfield.$name = fieldName;\n\t\t\tfield.$table = table;\n\t\t\tfield.$schema = schema;\n\t\t\tfield.$fullname = fullname;\n\t\t\tfield.$type = 'field';\n\t\t});\n\t});\n}\n\n// expand_field_shorthand_definition\n// ---------------------------------\n// Generates a field definition object from a shorthand string definition\n//\n// Format: `'type[,unique][,index][,nullable][,cascade][,auto_increment]'`\n//\n// Order of items does not matter except `type`, which must be first.\n//\nfunction expand_field_shorthand_definition(orm, fullname, def) {\n\tvar err = function (msg) {\n\t\treturn 'Failed to process field definition \"' + def + '\" for field ' +\n\t\t\tfullname + ': ' + msg;\n\t};\n\tvar f = def.split(',').map(function (s) { return s.trim(); });\n\tfunction flag(name) {\n\t\tvar idx = f.indexOf(name);\n\t\tif (idx === -1) {\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\tf.splice(idx, 1);\n\t\t\treturn true;\n\t\t}\n\t}\n\tif (f.length === 0) {\n\t\treturn orm.error(err('No type found'));\n\t}\n\tfield = {};\n\tfield.type = f.shift();\n\tfield.unique = flag('unique');\n\tfield.index = flag('index');\n\tfield.nullable = flag('nullable');\n\tfield.auto_increment = flag('auto_increment');\n\tif (flag('cascade')) {\n\t\tfield.onDelete = 'cascade';\n\t\tfield.onUpdate = 'cascade';\n\t}\n\tf = _(f).compact();\n\tif (f.length) {\n\t\treturn orm.error(err('Residue: ' + f.join(',')));\n\t}\n\treturn field;\n}\n","/home/travis/build/npmtest/node-npmtest-mysql-orm/node_modules/mysql-orm/parse-schema.js":"'use strict';\n\n/*\n * MySQL object-relational mapping\n * ===============================\n *\n * (C) 2014 Mark K Cowan <mark@battlesnake.co.uk>\n *\n * https://github.com/battlesnake/node-mysql-orm\n *\n * Released under GNU General Public License, Version 2\n *\n */\n\nvar mysql = require('mysql');\nvar async = require('async');\nvar _ = require('underscore');\n\nvar utils = require('./utils');\nvar names = utils.names;\nvar indent = utils.indent;\n\n// parse-schema\n// ============\n//\n// This module is used internally, you should never need to call it yourself.\n//\n\n// parse_schema\n// ------------\n// Parses the schema and validates some aspects of it:\n//  + Resolves type aliases in `schema.$types` and in `field.type`.\n//  + Resolves references in `field.type` and `field.references`.\n//  + Resolves types for implicit references\n//  + Generates names for keys (index/unique) if none was explicity specified.\n//  + Generates names for foreign keys, stores in `field.$fkname`.\n//  + Stores looked-up type in `field.$type`; `field.type` may be overwritten\n//    for implicit references by the type of the referred field.\n//\nmodule.exports.parse_schema = parse_schema;\nfunction parse_schema(orm) {\n\tvar schema = orm.schema;\n\t/* Resolve aliases */\n\tnames(schema.$types).forEach(function resolve_alias(alias) {\n\t\tvar type = schema.$types[alias];\n\t\twhile (_(schema.$types).has(type) && schema.$types[type] !== type) {\n\t\t\ttype = schema.$types[type];\n\t\t\tif (type === alias) {\n\t\t\t\treturn orm.error('Circular type alias dependency for \"' +\n\t\t\t\t\talias + '\"');\n\t\t\t}\n\t\t}\n\t\tschema.$types[alias] = type;\n\t});\n\tvar implicit_refs = [], all_refs = [];\n\t/* Process fields */\n\tnames(schema).forEach(function parse_table(tableName) {\n\t\tvar table = schema[tableName];\n\t\tnames(table).forEach(function parse_field(fieldName) {\n\t\t\tvar field = table[fieldName];\n\t\t\t/* Resolve aliases */\n\t\t\tif (_(orm.schema.$types).has(field.type)) {\n\t\t\t\tfield.type = orm.schema.$types[field.type];\n\t\t\t}\n\t\t\t/* Store resolved type */\n\t\t\tfield.$type = field.type;\n\t\t\t/* Builtin primary key type */\n\t\t\tif (field.type === '::id') {\n\t\t\t\tfield.type = 'INTEGER';\n\t\t\t\tfield.auto_increment = true;\n\t\t\t\tif (table.$primary.length > 0 &&\n\t\t\t\t\t!((table.$primary).length === 1\n\t\t\t\t\t\t&& table.$primary[0] === fieldName)) {\n\t\t\t\t\treturn orm.error('Cannot parse field \"' + field.$fullname +\n\t\t\t\t\t\t'\": table \"' + table.$fullname + '\" already has ' +\n\t\t\t\t\t\t'primary key(s) specified');\n\t\t\t\t}\n\t\t\t\ttable.$primary = [fieldName];\n\t\t\t}\n\t\t\t/* JSON field */\n\t\t\tvar match = field.type.match(/^JSON(?:\\(\\s*(\\d+)\\s*\\))?$/i);\n\t\t\tif (match) {\n\t\t\t\tfield.type = match[1] ? 'VARCHAR(' + match[1] + ')' : 'LONGTEXT';\n\t\t\t\tfield.serialize = function (o) {\n\t\t\t\t\treturn JSON.stringify(_(o).isUndefined() ? this.default : o);\n\t\t\t\t};\n\t\t\t\tfield.deserialize = function (s) {\n\t\t\t\t\treturn (s === null || s === '') ? this.default : JSON.parse(s);\n\t\t\t\t};\n\t\t\t}\n\t\t\t/* Auto-increment */\n\t\t\tif (field.auto_increment) {\n\t\t\t\ttable.$auto_increment = fieldName;\n\t\t\t}\n\t\t\t/* Implicit references */\n\t\t\tif (field.type.charAt(0) === ':') {\n\t\t\t\tif (_(field).references) {\n\t\t\t\t\treturn orm.error('Cannot parse type \"' + field.type +\n\t\t\t\t\t\t'\" of field \"' + field.$fullname + '\": a reference ' +\n\t\t\t\t\t\t'already exists in this field\\'s definition');\n\t\t\t\t}\n\t\t\t\tfield.references = field.type.substr(1);\n\t\t\t\tdelete field.type;\n\t\t\t\timplicit_refs.push(field);\n\t\t\t}\n\t\t\t/* Explicit references */\n\t\t\tif (field.references) {\n\t\t\t\tall_refs.push(field);\n\t\t\t}\n\t\t\t/* Index */\n\t\t\tif (field.index && !_(field.index).isString()) {\n\t\t\t\tfield.index = field.$name + '_idx';\n\t\t\t}\n\t\t\t/* Unique key */\n\t\t\tif (field.unique && !_(field.unique).isString()) {\n\t\t\t\tfield.unique = field.$name + '_uniq';\n\t\t\t}\n\t\t\t/* Reference options */\n\t\t\tif (field.references) {\n\t\t\t\tfield.onUpdate = reference_option(orm,\n\t\t\t\t\t_(field.onUpdate).isString() ? field.onUpdate : 'restrict');\n\t\t\t\tfield.onDelete = reference_option(orm,\n\t\t\t\t\t_(field.onDelete).isString() ? field.onDelete : 'restrict');\n\t\t\t}\n\t\t});\n\t});\n\t/* Resolve references */\n\tall_refs.forEach(function (field) {\n\t\tif (_(field.references).isString()) {\n\t\t\tfield.references = resolve_field(orm, field.$fullname,\n\t\t\t\tfield.references);\n\t\t}\n\t});\n\t/* Generate FK constraint names */\n\tall_refs.forEach(function (field) {\n\t\tfield.$fkname = [\n\t\t\t\tfield.$name, 'fk', field.references.$table.$name,\n\t\t\t\tfield.references.$name\n\t\t\t].join('_');\n\t});\n\t/* Resolve data types for implicit references */\n\tvar unresolved_implicit_refs = implicit_refs.length;\n\twhile (unresolved_implicit_refs > 0) {\n\t\tif (!_(implicit_refs).some(\n\t\t\tfunction resolveSome(field) {\n\t\t\t\tif (!_(field).has('type') && _(field.references).has('type')) {\n\t\t\t\t\tfield.type = field.references.type;\n\t\t\t\t\tunresolved_implicit_refs--;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t})) {\n\t\t\treturn orm.error('Failed to resolve references: Do you have a ' +\n\t\t\t\t'circular dependency between implicitly typed reference ' +\n\t\t\t\t'fields?  fields: ' +\n\t\t\t\t_(implicit_refs).pluck('$fullname').join(', '));\n\t\t}\n\t}\n}\n\n// resolve_field\n// -------------\n// Gets a field definition from a string naming the field (e.g. table.field)\n//\nfunction resolve_field(orm, fullname, str) {\n\tvar err = function (msg) {\n\t\treturn 'Failed to resolve field \"' + str + '\" for field \"' + fullname +\n\t\t\t'\": ' + msg;\n\t};\n\tvar path = str.split('.');\n\tif (path.length > 2) {\n\t\treturn orm.error(err('Format: <table name>.<field name>'));\n\t}\n\tvar table = path.shift();\n\tif (table.charAt(0) === '$' || !_(orm.schema).has(table)) {\n\t\treturn orm.error(err('Table ' + mysql.escapeId(table) + ' not found'));\n\t}\n\tvar field = path.shift();\n\tif (_(field).isUndefined()) {\n\t\tif (orm.schema[table].$primary.length > 1) {\n\t\t\treturn orm.error(err('Target table \"' + table + '\" has a ' +\n\t\t\t\t'composite primary key and no target field was explicitly ' +\n\t\t\t\t'specified in the relation definition'));\n\t\t} else\n\t\tif (orm.schema[table].$primary.length === 0) {\n\t\t\treturn orm.error(err('No field was specified and the target ' +\n\t\t\t\t'table \"' + table + '\" has no primary key defined to use as ' +\n\t\t\t\t'default'));\n\t\t}\n\t\tfield = orm.schema[table].$primary[0];\n\t}\n\tif (field.charAt(0) === '$' || !_(orm.schema[table]).has(field)) {\n\t\treturn orm.error(err('Field ' + mysql.escapeId(field) + ' was not ' +\n\t\t\t'found in table ' +\tmysql.escapeId(table)));\n\t}\n\treturn orm.schema[table][field];\n}\n\n// reference_option\n// ----------------\n// Helper function to parse reference_option values\n//\nfunction reference_option(orm, value) {\n\tvalue = value.toUpperCase();\n\tif (!_(['RESTRICT', 'CASCADE', 'SET NULL', 'NO ACTION']).contains(value)) {\n\t\torm.warn('unrecognised reference_option: ' + value);\n\t}\n\treturn value;\n}\n"}